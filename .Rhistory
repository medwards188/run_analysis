use <- x>10
x[use]
}
above <- function(x,n){
use <- x>n
x[use]
}
x<-1:20
above(x)
above(x,12)
above <- function(x,n=10){
use <- x>n
x[use]
}
above(x)
install.package("KernSmooth")
install.packages("KernSmooth")
library(KernSmooth)
library(swirl)
swirl()
dl <- Sys.Date()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
Sys.time()
t1 <- Sys.Time()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, %B %d, %Y %H:%M)
strptime(t3, "%B %d, %Y %H:%M"")
strptime(t3, "%B %d, %Y %H:%M")
strptime(t3, "%B %d, %Y %H:%M")
t4 <-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time()-t1
difftime(Sys.time(), t1, units=days)
difftime(Sys.time(), t1, units='days)
difftime(Sys.time(), t1, units='days'
difftime(Sys.time(), t1, units='days')
cube <- function(x, n) {
cube <- function(x, n) {
x^3
}
cube(3)
cube(3)
cube <- function(x, n) {
x^3
}
cube(3)
cube <- function(x, n) {
x^3
}
cube(3)
clear
cube <- function(x,n){
x^3
}
cube(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
?data.frame
library(datasets)
data(iris)
?iris
library(datasets)
data(iris)
?iris
library(datasets)
data(iris)
?iris
x->data(iris)
x<-data(iris)
header(x,5)
head(x,5)
head(x)
colNames(x)
colnames(x)
head(iris)
s<-split(iris,iris$Species)
lapply(s,function(y),colMeans(y[,1]))
lapply(s,function(y) colMeans(y[,1]))
lapply(s,function(y) colMeans(y[,c("Sepal.Length")]))
sapply(s,function(x) colMeans(x[,c("Sepal.Length","Petal.Length")], na.rm=TRUE))
apply(iris, 1, mean)
apply(iris, 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
apply(mtcars, 2, mean)
lapply(mtcars, mean)
with(mtcars, tapply(hp, cyl, mean))
209.21429-82.63636
debug(ls)
ls
sapply(s,function(x) colMeans(x[,c("Sepal.Length","Petal.Length")], na.rm=TRUE))
209.21429-82.63636
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6,6))
unique_vals<-lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
library(swirl)
swirl()
sapply(flags,unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,
| flags$red, summary)
tapply(flags$population,flags$red, summary)
tapply(flags$population,flags$landmass, summary)
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10)
letters
LETTERS
sample(LETTERS)
flips<-sample(c(0,1),100,replace=TRUE, prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2<-rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,100,25)
rpois(5,10)
replicate(100,rpois(5,10))
my_pois<-replicate(100,rpois(5,10))
my_pois
cm<-colMeans(my_poist)
cm<-colMeans(my_pois)
hist(cm)
## Below are a pair of functions that cache the inverse of a
## matrix.
## The makeCacheMatrix function creates a special "matrix" object
## that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m
##check this list (set=set, get=get, setmatrix = setmatrix,
getmatrix = getmatrix)
## Create special "matrix"
}
## The cacheSolve function computes the inverse of the special
## "matrix" returned by makeCacheMatrix above. If the inverse has
## already been calculated (and the matrix has not changed), then
## the cacheSolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
m <- x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix <- x$get()
m <- solve(matrix,...)
x$setmatrix(m)
m
## Return the inverse of the matrix
}
## Below are a pair of functions that cache the inverse of a
## matrix.
## The makeCacheMatrix function creates a special "matrix" object
## that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m
list (set=set, get=get, setmatrix = setmatrix,
getmatrix = getmatrix)
## Create special "matrix"
}
## The cacheSolve function computes the inverse of the special
## "matrix" returned by makeCacheMatrix above. If the inverse has
## already been calculated (and the matrix has not changed), then
## the cacheSolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
m <- x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix <- x$get()
m <- solve(matrix,...)
x$setmatrix(m)
m
## Return the inverse of the matrix
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m
list (set=set, get=get, setmatrix = setmatrix,
getmatrix = getmatrix)
## Create special "matrix"
}
m
x
x <- matrix(1:4,2,2)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m
list (set=set, get=get, setmatrix = setmatrix,
getmatrix = getmatrix)
## Create special "matrix"
}
x
cacheSolve <- function(x, ...) {
m <- x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix <- x$get()
m <- solve(matrix,...)
x$setmatrix(m)
m
## Return the inverse of the matrix
}
m
x <- matrix(1:4,2,2)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(matrix) m <<- matrix
getmatrix <- function() m
list (set=set, get=get, setmatrix = setmatrix,
getmatrix = getmatrix)
## Create special "matrix"
}
x
cacheSolve <- function(x, ...) {
m <- x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data,...)
x$setmatrix(m)
m
## Return the inverse of the matrix
}
m
x
solve(x)
?solve
x <- matrix(1:4,2,2)
cacheSolve <- function(x, ...) {
m <- x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data,...)
x$setmatrix(m)
m
## Return the inverse of the matrix
}
m
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list (set=set, get=get, setinverse = setinverse,
getinverse = getinverse)
## Create special "matrix"
}
m
x
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data,...)
x$setinverse(m)
m
## Return the inverse of the matrix
}
m
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list (set=set, get=get, setinverse = setinverse,
getinverse = getinverse)
## Create special "matrix"
}
## The cacheSolve function computes the inverse of the special
## "matrix" returned by makeCacheMatrix above. If the inverse has
## already been calculated (and the matrix has not changed), then
## the cacheSolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data,...)
x$setinverse(m)
m
## Return the inverse of the matrix
}
x <- matrix(1:4,2,2)
x
m <- makeCacheMatrix(x)
m
m$get()
cacheSolve(m)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(mean) m <<- mean
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
START_DATE <- as.Date("2007-02-01")
END_DATE <- as.Date("2007-02-02")
FILE_PATH <- '../data/household_power_consumption.txt'
df <- read.csv(FILE_PATH, header=T, sep=";", na.strings=c("?"))
df$Date <- as.Date(df$Date, "%d/%m/%Y")
df <- subset(df, Date == START_DATE | Date == END_DATE)
png('../out/plot1.png', width=480, height=480)
hist(na.omit(df$Global_active_power), xlab='Global Active Power (kilowatts)', ylab='Frequency', main='Global Active Power', col='red')
dev.off()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
install.packages("ggplot2", dependencies=TRUE)
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(datasets)
data(airquality)
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
install.packages("RMySQL")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
created = h5createFile("example.h5")
created <- h5createFile("example.h5")
library(rhdf5)
created <- h5createFile("example.h5")
created
packages <- c("data.table", "sqldf")
setInternet2(TRUE)
connection <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readLines(connection)
close(connection)
c(nchar(htmlCode[10]), nchar(htmlCode[20]), nchar(htmlCode[30]), nchar(htmlCode[100]))
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
lines <- readLines(url, n=10)
w <- c(1, 9, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3)
colNames <- c("filler", "week", "filler", "sstNino12", "filler", "sstaNino12", "filler", "sstNino3", "filler", "sstaNino3", "filler", "sstNino34", "filler", "sstaNino34", "filler", "sstNino4", "filler", "sstaNino4")
d <- read.fwf(url, w, header=FALSE, skip=4, col.names=colNames)
d <- d[, grep("^[^filler]", names(d))]
sum(d[, 4])
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
lines <- readLines(url, n = 10)
w <- c(1, 9, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3)
colNames <- c("filler", "week", "filler", "sstNino12", "filler", "sstaNino12",
"filler", "sstNino3", "filler", "sstaNino3", "filler", "sstNino34", "filler",
"sstaNino34", "filler", "sstNino4", "filler", "sstaNino4")
d <- read.fwf(url, w, header = FALSE, skip = 4, col.names = colNames)
d <- d[, grep("^[^filler]", names(d))]
sum(d[, 4])
setwd("~/Documents/Data Scientist Certification/Course 3/run_analysis")
data <- "getdata_projectfiles_UCI HAR Dataset.zip"
if ( file.exists(data) == FALSE) stop ("File not found.")
